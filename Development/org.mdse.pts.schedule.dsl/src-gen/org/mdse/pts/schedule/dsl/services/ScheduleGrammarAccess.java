/*
 * generated by Xtext 2.27.0-SNAPSHOT
 */
package org.mdse.pts.schedule.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ScheduleGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ScheduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.Schedule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScheduleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNetworkAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNetworkNetworkCrossReference_2_0 = (CrossReference)cNetworkAssignment_2.eContents().get(0);
		private final RuleCall cNetworkNetworkIDTerminalRuleCall_2_0_1 = (RuleCall)cNetworkNetworkCrossReference_2_0.eContents().get(1);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDepotAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDepotRootCrossReference_4_0 = (CrossReference)cDepotAssignment_4.eContents().get(0);
		private final RuleCall cDepotRootIDTerminalRuleCall_4_0_1 = (RuleCall)cDepotRootCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDepotAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cDepotRootCrossReference_5_1_0 = (CrossReference)cDepotAssignment_5_1.eContents().get(0);
		private final RuleCall cDepotRootIDTerminalRuleCall_5_1_0_1 = (RuleCall)cDepotRootCrossReference_5_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cTrainsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cTrainsTrainScheduleParserRuleCall_7_0_0 = (RuleCall)cTrainsAssignment_7_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		
		//Schedule:
		//    "schedule" "for" network=[network::Network] "with" depot+=[depot::Root] ("," depot+=[depot::Root])* ";"
		//    (trains+=TrainSchedule ";")*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"schedule" "for" network=[network::Network] "with" depot+=[depot::Root] ("," depot+=[depot::Root])* ";"
		//(trains+=TrainSchedule ";")*
		public Group getGroup() { return cGroup; }
		
		//"schedule"
		public Keyword getScheduleKeyword_0() { return cScheduleKeyword_0; }
		
		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//network=[network::Network]
		public Assignment getNetworkAssignment_2() { return cNetworkAssignment_2; }
		
		//[network::Network]
		public CrossReference getNetworkNetworkCrossReference_2_0() { return cNetworkNetworkCrossReference_2_0; }
		
		//ID
		public RuleCall getNetworkNetworkIDTerminalRuleCall_2_0_1() { return cNetworkNetworkIDTerminalRuleCall_2_0_1; }
		
		//"with"
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//depot+=[depot::Root]
		public Assignment getDepotAssignment_4() { return cDepotAssignment_4; }
		
		//[depot::Root]
		public CrossReference getDepotRootCrossReference_4_0() { return cDepotRootCrossReference_4_0; }
		
		//ID
		public RuleCall getDepotRootIDTerminalRuleCall_4_0_1() { return cDepotRootIDTerminalRuleCall_4_0_1; }
		
		//("," depot+=[depot::Root])*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//depot+=[depot::Root]
		public Assignment getDepotAssignment_5_1() { return cDepotAssignment_5_1; }
		
		//[depot::Root]
		public CrossReference getDepotRootCrossReference_5_1_0() { return cDepotRootCrossReference_5_1_0; }
		
		//ID
		public RuleCall getDepotRootIDTerminalRuleCall_5_1_0_1() { return cDepotRootIDTerminalRuleCall_5_1_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//(trains+=TrainSchedule ";")*
		public Group getGroup_7() { return cGroup_7; }
		
		//trains+=TrainSchedule
		public Assignment getTrainsAssignment_7_0() { return cTrainsAssignment_7_0; }
		
		//TrainSchedule
		public RuleCall getTrainsTrainScheduleParserRuleCall_7_0_0() { return cTrainsTrainScheduleParserRuleCall_7_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
	}
	public class TrainScheduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.TrainSchedule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScheduleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTrainKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTrainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTrainTrainCrossReference_2_0 = (CrossReference)cTrainAssignment_2.eContents().get(0);
		private final RuleCall cTrainTrainIDTerminalRuleCall_2_0_1 = (RuleCall)cTrainTrainCrossReference_2_0.eContents().get(1);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStarttimesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStarttimesStartTimeParserRuleCall_4_0 = (RuleCall)cStarttimesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAndKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStarttimesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStarttimesStartTimeParserRuleCall_5_1_0 = (RuleCall)cStarttimesAssignment_5_1.eContents().get(0);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStopsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStopsStartAtStopParserRuleCall_7_0 = (RuleCall)cStopsAssignment_7.eContents().get(0);
		private final Assignment cStopsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Alternatives cStopsAlternatives_8_0 = (Alternatives)cStopsAssignment_8.eContents().get(0);
		private final RuleCall cStopsViaStopParserRuleCall_8_0_0 = (RuleCall)cStopsAlternatives_8_0.eContents().get(0);
		private final RuleCall cStopsNormalStopParserRuleCall_8_0_1 = (RuleCall)cStopsAlternatives_8_0.eContents().get(1);
		private final Assignment cStopsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStopsTerminalStopParserRuleCall_9_0 = (RuleCall)cStopsAssignment_9.eContents().get(0);
		
		////TODO: Define syntax rules
		//TrainSchedule:
		//    "schedule" "train" train=[depot::Train] "on"
		//        starttimes+=StartTime ("and" starttimes+=StartTime)*
		//        ":"
		//        stops+=StartAtStop
		//        (stops+=(ViaStop|NormalStop))*
		//        stops+=TerminalStop
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"schedule" "train" train=[depot::Train] "on"
		//    starttimes+=StartTime ("and" starttimes+=StartTime)*
		//    ":"
		//    stops+=StartAtStop
		//    (stops+=(ViaStop|NormalStop))*
		//    stops+=TerminalStop
		public Group getGroup() { return cGroup; }
		
		//"schedule"
		public Keyword getScheduleKeyword_0() { return cScheduleKeyword_0; }
		
		//"train"
		public Keyword getTrainKeyword_1() { return cTrainKeyword_1; }
		
		//train=[depot::Train]
		public Assignment getTrainAssignment_2() { return cTrainAssignment_2; }
		
		//[depot::Train]
		public CrossReference getTrainTrainCrossReference_2_0() { return cTrainTrainCrossReference_2_0; }
		
		//ID
		public RuleCall getTrainTrainIDTerminalRuleCall_2_0_1() { return cTrainTrainIDTerminalRuleCall_2_0_1; }
		
		//"on"
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//starttimes+=StartTime
		public Assignment getStarttimesAssignment_4() { return cStarttimesAssignment_4; }
		
		//StartTime
		public RuleCall getStarttimesStartTimeParserRuleCall_4_0() { return cStarttimesStartTimeParserRuleCall_4_0; }
		
		//("and" starttimes+=StartTime)*
		public Group getGroup_5() { return cGroup_5; }
		
		//"and"
		public Keyword getAndKeyword_5_0() { return cAndKeyword_5_0; }
		
		//starttimes+=StartTime
		public Assignment getStarttimesAssignment_5_1() { return cStarttimesAssignment_5_1; }
		
		//StartTime
		public RuleCall getStarttimesStartTimeParserRuleCall_5_1_0() { return cStarttimesStartTimeParserRuleCall_5_1_0; }
		
		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//stops+=StartAtStop
		public Assignment getStopsAssignment_7() { return cStopsAssignment_7; }
		
		//StartAtStop
		public RuleCall getStopsStartAtStopParserRuleCall_7_0() { return cStopsStartAtStopParserRuleCall_7_0; }
		
		//(stops+=(ViaStop|NormalStop))*
		public Assignment getStopsAssignment_8() { return cStopsAssignment_8; }
		
		//(ViaStop|NormalStop)
		public Alternatives getStopsAlternatives_8_0() { return cStopsAlternatives_8_0; }
		
		//ViaStop
		public RuleCall getStopsViaStopParserRuleCall_8_0_0() { return cStopsViaStopParserRuleCall_8_0_0; }
		
		//NormalStop
		public RuleCall getStopsNormalStopParserRuleCall_8_0_1() { return cStopsNormalStopParserRuleCall_8_0_1; }
		
		//stops+=TerminalStop
		public Assignment getStopsAssignment_9() { return cStopsAssignment_9; }
		
		//TerminalStop
		public RuleCall getStopsTerminalStopParserRuleCall_9_0() { return cStopsTerminalStopParserRuleCall_9_0; }
	}
	public class StartAtStopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.StartAtStop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStationStationCrossReference_2_0 = (CrossReference)cStationAssignment_2.eContents().get(0);
		private final RuleCall cStationStationSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cStationStationCrossReference_2_0.eContents().get(1);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPlatformKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPlatformAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPlatformIDTerminalRuleCall_5_0 = (RuleCall)cPlatformAssignment_5.eContents().get(0);
		
		//StartAtStop returns Stop:
		//    "start" "at" station=[network::Station|STRING] "on" "platform" platform=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"start" "at" station=[network::Station|STRING] "on" "platform" platform=ID
		public Group getGroup() { return cGroup; }
		
		//"start"
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//"at"
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//station=[network::Station|STRING]
		public Assignment getStationAssignment_2() { return cStationAssignment_2; }
		
		//[network::Station|STRING]
		public CrossReference getStationStationCrossReference_2_0() { return cStationStationCrossReference_2_0; }
		
		//STRING
		public RuleCall getStationStationSTRINGTerminalRuleCall_2_0_1() { return cStationStationSTRINGTerminalRuleCall_2_0_1; }
		
		//"on"
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//"platform"
		public Keyword getPlatformKeyword_4() { return cPlatformKeyword_4; }
		
		//platform=ID
		public Assignment getPlatformAssignment_5() { return cPlatformAssignment_5; }
		
		//ID
		public RuleCall getPlatformIDTerminalRuleCall_5_0() { return cPlatformIDTerminalRuleCall_5_0; }
	}
	public class ViaStopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.ViaStop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDriveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cViaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cViaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cViaLegCrossReference_2_0 = (CrossReference)cViaAssignment_2.eContents().get(0);
		private final RuleCall cViaLegSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cViaLegCrossReference_2_0.eContents().get(1);
		private final Keyword cAndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cAtKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cStationStationCrossReference_6_0 = (CrossReference)cStationAssignment_6.eContents().get(0);
		private final RuleCall cStationStationSTRINGTerminalRuleCall_6_0_1 = (RuleCall)cStationStationCrossReference_6_0.eContents().get(1);
		private final Keyword cOnKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cPlatformKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPlatformAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPlatformIDTerminalRuleCall_9_0 = (RuleCall)cPlatformAssignment_9.eContents().get(0);
		private final Keyword cForKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cStoppedTimeAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cStoppedTimeINTTerminalRuleCall_11_0 = (RuleCall)cStoppedTimeAssignment_11.eContents().get(0);
		private final Keyword cMinKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cAndKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cRotateAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final Keyword cRotateReverseKeyword_13_1_0 = (Keyword)cRotateAssignment_13_1.eContents().get(0);
		
		//ViaStop returns Stop:
		//    "drive" "via" via=[network::Leg|STRING] "and" "stop" "at" station=[network::Station|STRING] "on" "platform" platform=ID "for" stoppedTime=INT "min" ("and" rotate?=("reverse"))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"drive" "via" via=[network::Leg|STRING] "and" "stop" "at" station=[network::Station|STRING] "on" "platform" platform=ID "for" stoppedTime=INT "min" ("and" rotate?=("reverse"))?
		public Group getGroup() { return cGroup; }
		
		//"drive"
		public Keyword getDriveKeyword_0() { return cDriveKeyword_0; }
		
		//"via"
		public Keyword getViaKeyword_1() { return cViaKeyword_1; }
		
		//via=[network::Leg|STRING]
		public Assignment getViaAssignment_2() { return cViaAssignment_2; }
		
		//[network::Leg|STRING]
		public CrossReference getViaLegCrossReference_2_0() { return cViaLegCrossReference_2_0; }
		
		//STRING
		public RuleCall getViaLegSTRINGTerminalRuleCall_2_0_1() { return cViaLegSTRINGTerminalRuleCall_2_0_1; }
		
		//"and"
		public Keyword getAndKeyword_3() { return cAndKeyword_3; }
		
		//"stop"
		public Keyword getStopKeyword_4() { return cStopKeyword_4; }
		
		//"at"
		public Keyword getAtKeyword_5() { return cAtKeyword_5; }
		
		//station=[network::Station|STRING]
		public Assignment getStationAssignment_6() { return cStationAssignment_6; }
		
		//[network::Station|STRING]
		public CrossReference getStationStationCrossReference_6_0() { return cStationStationCrossReference_6_0; }
		
		//STRING
		public RuleCall getStationStationSTRINGTerminalRuleCall_6_0_1() { return cStationStationSTRINGTerminalRuleCall_6_0_1; }
		
		//"on"
		public Keyword getOnKeyword_7() { return cOnKeyword_7; }
		
		//"platform"
		public Keyword getPlatformKeyword_8() { return cPlatformKeyword_8; }
		
		//platform=ID
		public Assignment getPlatformAssignment_9() { return cPlatformAssignment_9; }
		
		//ID
		public RuleCall getPlatformIDTerminalRuleCall_9_0() { return cPlatformIDTerminalRuleCall_9_0; }
		
		//"for"
		public Keyword getForKeyword_10() { return cForKeyword_10; }
		
		//stoppedTime=INT
		public Assignment getStoppedTimeAssignment_11() { return cStoppedTimeAssignment_11; }
		
		//INT
		public RuleCall getStoppedTimeINTTerminalRuleCall_11_0() { return cStoppedTimeINTTerminalRuleCall_11_0; }
		
		//"min"
		public Keyword getMinKeyword_12() { return cMinKeyword_12; }
		
		//("and" rotate?=("reverse"))?
		public Group getGroup_13() { return cGroup_13; }
		
		//"and"
		public Keyword getAndKeyword_13_0() { return cAndKeyword_13_0; }
		
		//rotate?=("reverse")
		public Assignment getRotateAssignment_13_1() { return cRotateAssignment_13_1; }
		
		//("reverse")
		public Keyword getRotateReverseKeyword_13_1_0() { return cRotateReverseKeyword_13_1_0; }
	}
	public class NormalStopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.NormalStop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStationStationCrossReference_2_0 = (CrossReference)cStationAssignment_2.eContents().get(0);
		private final RuleCall cStationStationSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cStationStationCrossReference_2_0.eContents().get(1);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPlatformKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPlatformAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPlatformIDTerminalRuleCall_5_0 = (RuleCall)cPlatformAssignment_5.eContents().get(0);
		private final Keyword cForKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStoppedTimeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStoppedTimeINTTerminalRuleCall_7_0 = (RuleCall)cStoppedTimeAssignment_7.eContents().get(0);
		private final Keyword cMinKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cAndKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cRotateAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final Keyword cRotateReverseKeyword_9_1_0 = (Keyword)cRotateAssignment_9_1.eContents().get(0);
		
		//NormalStop returns Stop:
		//    "stop" "at" station=[network::Station|STRING] "on" "platform" platform=ID "for" stoppedTime=INT "min" ("and" rotate?=("reverse"))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"stop" "at" station=[network::Station|STRING] "on" "platform" platform=ID "for" stoppedTime=INT "min" ("and" rotate?=("reverse"))?
		public Group getGroup() { return cGroup; }
		
		//"stop"
		public Keyword getStopKeyword_0() { return cStopKeyword_0; }
		
		//"at"
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//station=[network::Station|STRING]
		public Assignment getStationAssignment_2() { return cStationAssignment_2; }
		
		//[network::Station|STRING]
		public CrossReference getStationStationCrossReference_2_0() { return cStationStationCrossReference_2_0; }
		
		//STRING
		public RuleCall getStationStationSTRINGTerminalRuleCall_2_0_1() { return cStationStationSTRINGTerminalRuleCall_2_0_1; }
		
		//"on"
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//"platform"
		public Keyword getPlatformKeyword_4() { return cPlatformKeyword_4; }
		
		//platform=ID
		public Assignment getPlatformAssignment_5() { return cPlatformAssignment_5; }
		
		//ID
		public RuleCall getPlatformIDTerminalRuleCall_5_0() { return cPlatformIDTerminalRuleCall_5_0; }
		
		//"for"
		public Keyword getForKeyword_6() { return cForKeyword_6; }
		
		//stoppedTime=INT
		public Assignment getStoppedTimeAssignment_7() { return cStoppedTimeAssignment_7; }
		
		//INT
		public RuleCall getStoppedTimeINTTerminalRuleCall_7_0() { return cStoppedTimeINTTerminalRuleCall_7_0; }
		
		//"min"
		public Keyword getMinKeyword_8() { return cMinKeyword_8; }
		
		//("and" rotate?=("reverse"))?
		public Group getGroup_9() { return cGroup_9; }
		
		//"and"
		public Keyword getAndKeyword_9_0() { return cAndKeyword_9_0; }
		
		//rotate?=("reverse")
		public Assignment getRotateAssignment_9_1() { return cRotateAssignment_9_1; }
		
		//("reverse")
		public Keyword getRotateReverseKeyword_9_1_0() { return cRotateReverseKeyword_9_1_0; }
	}
	public class TerminalStopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.TerminalStop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTerminateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStationStationCrossReference_2_0 = (CrossReference)cStationAssignment_2.eContents().get(0);
		private final RuleCall cStationStationSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cStationStationCrossReference_2_0.eContents().get(1);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPlatformKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPlatformAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPlatformIDTerminalRuleCall_5_0 = (RuleCall)cPlatformAssignment_5.eContents().get(0);
		
		//TerminalStop returns Stop:
		//    "terminate" "at" station=[network::Station|STRING] "on" "platform" platform=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"terminate" "at" station=[network::Station|STRING] "on" "platform" platform=ID
		public Group getGroup() { return cGroup; }
		
		//"terminate"
		public Keyword getTerminateKeyword_0() { return cTerminateKeyword_0; }
		
		//"at"
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//station=[network::Station|STRING]
		public Assignment getStationAssignment_2() { return cStationAssignment_2; }
		
		//[network::Station|STRING]
		public CrossReference getStationStationCrossReference_2_0() { return cStationStationCrossReference_2_0; }
		
		//STRING
		public RuleCall getStationStationSTRINGTerminalRuleCall_2_0_1() { return cStationStationSTRINGTerminalRuleCall_2_0_1; }
		
		//"on"
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//"platform"
		public Keyword getPlatformKeyword_4() { return cPlatformKeyword_4; }
		
		//platform=ID
		public Assignment getPlatformAssignment_5() { return cPlatformAssignment_5; }
		
		//ID
		public RuleCall getPlatformIDTerminalRuleCall_5_0() { return cPlatformIDTerminalRuleCall_5_0; }
	}
	public class StartTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.StartTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWeekdaysAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWeekdaysWeekdayEnumRuleCall_0_0 = (RuleCall)cWeekdaysAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cWeekdaysAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWeekdaysWeekdayEnumRuleCall_1_1_0 = (RuleCall)cWeekdaysAssignment_1_1.eContents().get(0);
		private final Keyword cAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTimestampsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimestampsTimeParserRuleCall_3_0 = (RuleCall)cTimestampsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTimestampsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTimestampsTimeParserRuleCall_4_1_0 = (RuleCall)cTimestampsAssignment_4_1.eContents().get(0);
		
		//StartTime:
		//    weekdays+=Weekday ("," weekdays+=Weekday)*
		//    "at" timestamps+=Time ("," timestamps+=Time)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//weekdays+=Weekday ("," weekdays+=Weekday)*
		//"at" timestamps+=Time ("," timestamps+=Time)*
		public Group getGroup() { return cGroup; }
		
		//weekdays+=Weekday
		public Assignment getWeekdaysAssignment_0() { return cWeekdaysAssignment_0; }
		
		//Weekday
		public RuleCall getWeekdaysWeekdayEnumRuleCall_0_0() { return cWeekdaysWeekdayEnumRuleCall_0_0; }
		
		//("," weekdays+=Weekday)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//weekdays+=Weekday
		public Assignment getWeekdaysAssignment_1_1() { return cWeekdaysAssignment_1_1; }
		
		//Weekday
		public RuleCall getWeekdaysWeekdayEnumRuleCall_1_1_0() { return cWeekdaysWeekdayEnumRuleCall_1_1_0; }
		
		//"at"
		public Keyword getAtKeyword_2() { return cAtKeyword_2; }
		
		//timestamps+=Time
		public Assignment getTimestampsAssignment_3() { return cTimestampsAssignment_3; }
		
		//Time
		public RuleCall getTimestampsTimeParserRuleCall_3_0() { return cTimestampsTimeParserRuleCall_3_0; }
		
		//("," timestamps+=Time)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//timestamps+=Time
		public Assignment getTimestampsAssignment_4_1() { return cTimestampsAssignment_4_1; }
		
		//Time
		public RuleCall getTimestampsTimeParserRuleCall_4_1_0() { return cTimestampsTimeParserRuleCall_4_1_0; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.Time");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHourAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHourINTTerminalRuleCall_0_0 = (RuleCall)cHourAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMinuteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinuteINTTerminalRuleCall_2_0 = (RuleCall)cMinuteAssignment_2.eContents().get(0);
		
		//Time:
		//    hour=INT ":" minute=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//hour=INT ":" minute=INT
		public Group getGroup() { return cGroup; }
		
		//hour=INT
		public Assignment getHourAssignment_0() { return cHourAssignment_0; }
		
		//INT
		public RuleCall getHourINTTerminalRuleCall_0_0() { return cHourINTTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//minute=INT
		public Assignment getMinuteAssignment_2() { return cMinuteAssignment_2; }
		
		//INT
		public RuleCall getMinuteINTTerminalRuleCall_2_0() { return cMinuteINTTerminalRuleCall_2_0; }
	}
	
	public class WeekdayElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.Weekday");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMONDAYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMONDAYMondayKeyword_0_0 = (Keyword)cMONDAYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTUESDAYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTUESDAYTuesdayKeyword_1_0 = (Keyword)cTUESDAYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWEDNESDAYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWEDNESDAYWednesdayKeyword_2_0 = (Keyword)cWEDNESDAYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTHURSDAYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTHURSDAYThursdayKeyword_3_0 = (Keyword)cTHURSDAYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFRIDAYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFRIDAYFridayKeyword_4_0 = (Keyword)cFRIDAYEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSATURDAYEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSATURDAYSaturdayKeyword_5_0 = (Keyword)cSATURDAYEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSUNDAYEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSUNDAYSundayKeyword_6_0 = (Keyword)cSUNDAYEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Weekday:
		//    MONDAY="Monday" |
		//    TUESDAY="Tuesday" |
		//    WEDNESDAY="Wednesday" |
		//    THURSDAY="Thursday" |
		//    FRIDAY="Friday" |
		//    SATURDAY="Saturday" |
		//    SUNDAY="Sunday"
		//;
		public EnumRule getRule() { return rule; }
		
		//MONDAY="Monday" |
		//TUESDAY="Tuesday" |
		//WEDNESDAY="Wednesday" |
		//THURSDAY="Thursday" |
		//FRIDAY="Friday" |
		//SATURDAY="Saturday" |
		//SUNDAY="Sunday"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MONDAY="Monday"
		public EnumLiteralDeclaration getMONDAYEnumLiteralDeclaration_0() { return cMONDAYEnumLiteralDeclaration_0; }
		
		//"Monday"
		public Keyword getMONDAYMondayKeyword_0_0() { return cMONDAYMondayKeyword_0_0; }
		
		//TUESDAY="Tuesday"
		public EnumLiteralDeclaration getTUESDAYEnumLiteralDeclaration_1() { return cTUESDAYEnumLiteralDeclaration_1; }
		
		//"Tuesday"
		public Keyword getTUESDAYTuesdayKeyword_1_0() { return cTUESDAYTuesdayKeyword_1_0; }
		
		//WEDNESDAY="Wednesday"
		public EnumLiteralDeclaration getWEDNESDAYEnumLiteralDeclaration_2() { return cWEDNESDAYEnumLiteralDeclaration_2; }
		
		//"Wednesday"
		public Keyword getWEDNESDAYWednesdayKeyword_2_0() { return cWEDNESDAYWednesdayKeyword_2_0; }
		
		//THURSDAY="Thursday"
		public EnumLiteralDeclaration getTHURSDAYEnumLiteralDeclaration_3() { return cTHURSDAYEnumLiteralDeclaration_3; }
		
		//"Thursday"
		public Keyword getTHURSDAYThursdayKeyword_3_0() { return cTHURSDAYThursdayKeyword_3_0; }
		
		//FRIDAY="Friday"
		public EnumLiteralDeclaration getFRIDAYEnumLiteralDeclaration_4() { return cFRIDAYEnumLiteralDeclaration_4; }
		
		//"Friday"
		public Keyword getFRIDAYFridayKeyword_4_0() { return cFRIDAYFridayKeyword_4_0; }
		
		//SATURDAY="Saturday"
		public EnumLiteralDeclaration getSATURDAYEnumLiteralDeclaration_5() { return cSATURDAYEnumLiteralDeclaration_5; }
		
		//"Saturday"
		public Keyword getSATURDAYSaturdayKeyword_5_0() { return cSATURDAYSaturdayKeyword_5_0; }
		
		//SUNDAY="Sunday"
		public EnumLiteralDeclaration getSUNDAYEnumLiteralDeclaration_6() { return cSUNDAYEnumLiteralDeclaration_6; }
		
		//"Sunday"
		public Keyword getSUNDAYSundayKeyword_6_0() { return cSUNDAYSundayKeyword_6_0; }
	}
	
	private final ScheduleElements pSchedule;
	private final TrainScheduleElements pTrainSchedule;
	private final StartAtStopElements pStartAtStop;
	private final ViaStopElements pViaStop;
	private final NormalStopElements pNormalStop;
	private final TerminalStopElements pTerminalStop;
	private final StartTimeElements pStartTime;
	private final TimeElements pTime;
	private final WeekdayElements eWeekday;
	private final TerminalRule tLETTER;
	private final TerminalRule tDIGIT;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public ScheduleGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pSchedule = new ScheduleElements();
		this.pTrainSchedule = new TrainScheduleElements();
		this.pStartAtStop = new StartAtStopElements();
		this.pViaStop = new ViaStopElements();
		this.pNormalStop = new NormalStopElements();
		this.pTerminalStop = new TerminalStopElements();
		this.pStartTime = new StartTimeElements();
		this.pTime = new TimeElements();
		this.eWeekday = new WeekdayElements();
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.LETTER");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.DIGIT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.mdse.pts.schedule.dsl.Schedule".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Schedule:
	//    "schedule" "for" network=[network::Network] "with" depot+=[depot::Root] ("," depot+=[depot::Root])* ";"
	//    (trains+=TrainSchedule ";")*
	//;
	public ScheduleElements getScheduleAccess() {
		return pSchedule;
	}
	
	public ParserRule getScheduleRule() {
		return getScheduleAccess().getRule();
	}
	
	////TODO: Define syntax rules
	//TrainSchedule:
	//    "schedule" "train" train=[depot::Train] "on"
	//        starttimes+=StartTime ("and" starttimes+=StartTime)*
	//        ":"
	//        stops+=StartAtStop
	//        (stops+=(ViaStop|NormalStop))*
	//        stops+=TerminalStop
	//;
	public TrainScheduleElements getTrainScheduleAccess() {
		return pTrainSchedule;
	}
	
	public ParserRule getTrainScheduleRule() {
		return getTrainScheduleAccess().getRule();
	}
	
	//StartAtStop returns Stop:
	//    "start" "at" station=[network::Station|STRING] "on" "platform" platform=ID
	//;
	public StartAtStopElements getStartAtStopAccess() {
		return pStartAtStop;
	}
	
	public ParserRule getStartAtStopRule() {
		return getStartAtStopAccess().getRule();
	}
	
	//ViaStop returns Stop:
	//    "drive" "via" via=[network::Leg|STRING] "and" "stop" "at" station=[network::Station|STRING] "on" "platform" platform=ID "for" stoppedTime=INT "min" ("and" rotate?=("reverse"))?
	//;
	public ViaStopElements getViaStopAccess() {
		return pViaStop;
	}
	
	public ParserRule getViaStopRule() {
		return getViaStopAccess().getRule();
	}
	
	//NormalStop returns Stop:
	//    "stop" "at" station=[network::Station|STRING] "on" "platform" platform=ID "for" stoppedTime=INT "min" ("and" rotate?=("reverse"))?
	//;
	public NormalStopElements getNormalStopAccess() {
		return pNormalStop;
	}
	
	public ParserRule getNormalStopRule() {
		return getNormalStopAccess().getRule();
	}
	
	//TerminalStop returns Stop:
	//    "terminate" "at" station=[network::Station|STRING] "on" "platform" platform=ID
	//;
	public TerminalStopElements getTerminalStopAccess() {
		return pTerminalStop;
	}
	
	public ParserRule getTerminalStopRule() {
		return getTerminalStopAccess().getRule();
	}
	
	//StartTime:
	//    weekdays+=Weekday ("," weekdays+=Weekday)*
	//    "at" timestamps+=Time ("," timestamps+=Time)*
	//;
	public StartTimeElements getStartTimeAccess() {
		return pStartTime;
	}
	
	public ParserRule getStartTimeRule() {
		return getStartTimeAccess().getRule();
	}
	
	//Time:
	//    hour=INT ":" minute=INT
	//;
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//enum Weekday:
	//    MONDAY="Monday" |
	//    TUESDAY="Tuesday" |
	//    WEDNESDAY="Wednesday" |
	//    THURSDAY="Thursday" |
	//    FRIDAY="Friday" |
	//    SATURDAY="Saturday" |
	//    SUNDAY="Sunday"
	//;
	public WeekdayElements getWeekdayAccess() {
		return eWeekday;
	}
	
	public EnumRule getWeekdayRule() {
		return getWeekdayAccess().getRule();
	}
	
	//terminal fragment LETTER:
	//    ('a'..'z' | 'A'..'Z')
	//;
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal fragment DIGIT:
	//    ('0'..'9')
	//;
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal ID:
	//    '^'?('_' | LETTER) ('_' | LETTER | DIGIT )*
	//;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//    DIGIT+
	//;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//    '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"'
	//;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//    '/*' -> '*/'
	//;
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//    '//' !('\n'|'\r')* ('\r'? '\n')?
	//;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//    (' '|'\t'|'\r'|'\n')+
	//;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
